<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Levicron 3D Viewer ‚Äì Animierte Rotation</title>
  <style>
    html, body {
      margin: 0;
      overflow: hidden;
      width: 100%;
      height: 100%;
    }
    #renderCanvas {
      width: 100%;
      height: 100%;
      display: block;
      touch-action: none;
      background-color: rgb(212, 212, 212);
    }
  </style>
</head>
<body>
<canvas id="renderCanvas"></canvas>

<script src="https://cdn.babylonjs.com/babylon.js"></script>
<script src="https://cdn.babylonjs.com/loaders/babylon.glTF2FileLoader.min.js"></script>
<script src="https://cdn.babylonjs.com/environment.js"></script>

<script>
const canvas = document.getElementById("renderCanvas");
const engine = new BABYLON.Engine(canvas, true);
let camera;

const createScene = () => {
  const scene = new BABYLON.Scene(engine);
  scene.clearColor = new BABYLON.Color4(0.83, 0.83, 0.83, 1);

  // üéØ Kamera (kein AutoRotate mehr!)
  const cameraTarget = new BABYLON.Vector3(0, 1, 0);
  camera = new BABYLON.ArcRotateCamera("camera", 0, Math.PI / 2.4, 1250, cameraTarget, scene);
  camera.attachControl(canvas, true);
  camera.lowerRadiusLimit = 1500;
  camera.upperRadiusLimit = 1500;

  // üí° Licht
  const light = new BABYLON.SpotLight("spotLight",
    new BABYLON.Vector3(10, 20, -10),
    new BABYLON.Vector3(-1, -2, 1),
    Math.PI / 3,
    2,
    scene);
  light.intensity = 1.2;

  // üåê Environment
  const envTex = BABYLON.CubeTexture.CreateFromPrefilteredData(
    "https://assets.babylonjs.com/environments/studio.env",
    scene
  );
  scene.environmentTexture = envTex;
  scene.createDefaultEnvironment({
    environmentTexture: envTex,
    createGround: true,
    createSkybox: false
  });

  // üì¶ Modelle
  const modelFiles = [
    "100_xx1_xxx_xxx_xxx_ASD-Cx.glb",
    "100_xx1_xxx_xxx_xxx_ASD-Cx.glb",
    "100_xx1_xxx_xxx_xxx_ASD-Cx.glb",
    "100_xx1_xxx_xxx_xxx_ASD-Cx.glb",
    "100_xx1_xxx_xxx_xxx_ASD-Cx.glb",
    "100_xx1_xxx_xxx_xxx_ASD-Cx.glb",
    "100_xx1_xxx_xxx_xxx_ASD-Cx.glb"
  ];

  const radius = 650;

  modelFiles.forEach((file, index) => {
    BABYLON.SceneLoader.ImportMesh(null, "", file, scene, function (meshes) {
      if (!meshes || meshes.length === 0) {
        console.warn("Kein Mesh geladen f√ºr:", file);
        return;
      }

      const root = new BABYLON.TransformNode("root_" + index, scene);
      meshes.forEach(m => m.parent = root);

      const angle = (2 * Math.PI / modelFiles.length) * index;
      const x = Math.cos(angle) * radius;
      const z = Math.sin(angle) * radius;
      root.position = new BABYLON.Vector3(x, 0.5, z);

      root.lookAt(BABYLON.Vector3.Zero());
      root.rotate(BABYLON.Axis.Y, -Math.PI / 4, BABYLON.Space.LOCAL);

      root.getChildMeshes().forEach(mesh => {
        const mat = mesh.material;
        if (mat && mat instanceof BABYLON.PBRMaterial) {
          mat.metallic = 1.0;
          mat.roughness = 0.05;
          mat.environmentIntensity = 1.5;
        }
      });
    });
  });

  return scene;
};

const scene = createScene();
engine.runRenderLoop(() => scene.render());
window.addEventListener("resize", () => engine.resize());

// üîÅ Kamera-Animations-Logik
const steps = 7;
const pauseTime = 5000; // 5 Sekunden
const rotateTime = 2000; // 2 Sekunden Rotation

let currentIndex = 0;

function animateToNextAngle() {
  const startAlpha = camera.alpha;
  const nextIndex = (currentIndex + 1) % steps;
  const endAlpha = (2 * Math.PI / steps) * nextIndex;

  const startTime = performance.now();

  function animateFrame(now) {
    const elapsed = now - startTime;
    const t = Math.min(elapsed / rotateTime, 1); // 0 ‚Üí 1
    const smoothStep = 0.5 - 0.5 * Math.cos(Math.PI * t); // sinusf√∂rmige Interpolation

    camera.alpha = startAlpha + (endAlpha - startAlpha) * smoothStep;

    if (t < 1) {
      requestAnimationFrame(animateFrame);
    } else {
      currentIndex = nextIndex;
      setTimeout(animateToNextAngle, pauseTime);
    }
  }

  requestAnimationFrame(animateFrame);
}

// ‚è± Start nach kurzer Verz√∂gerung
setTimeout(animateToNextAngle, 1000);
</script>
</body>
</html>
